{"ast":null,"code":"// import { USER_MAIN_DATA } from '../data/mocked-data'\n// import { USER_ACTIVITY } from '../data/mocked-data'\n// import { USER_AVERAGE_SESSIONS } from '../data/mocked-data'\n// import { USER_PERFORMANCE } from '../data/mocked-data'\n\nexport class Modelisation {\n  constructor(data) {\n    this.data = data;\n  }\n\n  //component Bonjour\n  formatUserName(params) {\n    for (let element of this.data) {\n      if (element.id.toString() === params.id) {\n        return {\n          name: element.userInfos.firstName\n        };\n      }\n    }\n  }\n\n  // composant Energie\n  formatDataEnergy(params) {\n    for (let element of this.data) {\n      if (element.id.toString() === params.id) {\n        return {\n          calorieCount: element.keyData.calorieCount,\n          proteinCount: element.keyData.proteinCount,\n          carbohydrateCount: element.keyData.carbohydrateCount,\n          lipidCount: element.keyData.lipidCount\n        };\n      }\n    }\n  }\n  // composant Diagramme Score\n  formatDataScore(params) {\n    for (let element of this.data) {\n      if (element.id.toString() === params.id) {\n        return {\n          name: 'score',\n          value: element.todayScore * 100\n        };\n      }\n    }\n  }\n\n  // composant Diagramme courbe\n  formatDataSessions(params) {\n    const data = [];\n    for (let element of this.data) {\n      if (element.userId.toString() === params.id) {\n        element.sessions.map(el => {\n          // convertit les nombres en jours\n          switch (el.day) {\n            case 1:\n              el.day = 'L';\n              break;\n            case 2:\n              el.day = 'M';\n              break;\n            case 3:\n              el.day = 'M';\n              break;\n            case 4:\n              el.day = 'J';\n              break;\n            case 5:\n              el.day = 'V';\n              break;\n            case 6:\n              el.day = 'S';\n              break;\n            case 7:\n              el.day = 'D';\n              break;\n            default:\n            // console.log(`erreur de jour ${el.day}.`)\n          }\n\n          data.push({\n            name: el.day,\n            // uv: 0,\n            pv: el.sessionLength\n            // amt: 0,\n          });\n\n          return;\n        });\n        return data;\n      }\n    }\n  }\n  formatDataActivity(params) {\n    const data = [];\n    const formatDate = string => {\n      console.log(string);\n      let sliced = string.slice(-1);\n      // console.log(popped)\n      return sliced;\n    };\n    for (let element of this.data) {\n      if (element.userId.toString() === params.id) {\n        element.sessions.map(el => {\n          data.push({\n            name: formatDate(el.day),\n            // name: el.day,\n            uv: el.kilogram,\n            pv: el.calories\n          });\n          return;\n        });\n        return data;\n      }\n    }\n  }\n\n  // composant diagramme toile\n  formatDataRadarChart(params) {\n    const data = [];\n    for (let element of this.data) {\n      // console.log(element)\n      if (element.userId.toString() === params.id) {\n        element.data.map(el => {\n          switch (element.kind) {\n            case 1:\n              element.kind = 'L';\n              break;\n\n            // case 2:\n            //   el.day = 'M'\n            //   break\n            // case 3:\n            //   el.day = 'M'\n            //   break\n            // case 4:\n            //   el.day = 'J'\n            //   break\n            // case 5:\n            //   el.day = 'V'\n            //   break\n            // case 6:\n            //   el.day = 'S'\n            //   break\n            // case 7:\n            //   el.day = 'D'\n            //   break\n            // default:\n            // // console.log(`erreur de jour ${el.day}.`)\n          }\n\n          data.push({\n            subject: el.kind,\n            A: el.value\n          });\n          // return (el.kind = element.kind[el.kind])\n        });\n\n        // console.log(data)\n        return data;\n      }\n    }\n  }\n}","map":{"version":3,"names":["Modelisation","constructor","data","formatUserName","params","element","id","toString","name","userInfos","firstName","formatDataEnergy","calorieCount","keyData","proteinCount","carbohydrateCount","lipidCount","formatDataScore","value","todayScore","formatDataSessions","userId","sessions","map","el","day","push","pv","sessionLength","formatDataActivity","formatDate","string","console","log","sliced","slice","uv","kilogram","calories","formatDataRadarChart","kind","subject","A"],"sources":["/Users/ste/Documents/JOB/OPENCLASSROOMS/PROJET 12/OCR_P12_SPORTSEE/front-end/src/data/Modelisation.js"],"sourcesContent":["// import { USER_MAIN_DATA } from '../data/mocked-data'\n// import { USER_ACTIVITY } from '../data/mocked-data'\n// import { USER_AVERAGE_SESSIONS } from '../data/mocked-data'\n// import { USER_PERFORMANCE } from '../data/mocked-data'\n\nexport class Modelisation {\n  constructor(data) {\n    this.data = data\n  }\n\n  //component Bonjour\n  formatUserName(params) {\n    for (let element of this.data) {\n      if (element.id.toString() === params.id) {\n        return {\n          name: element.userInfos.firstName,\n        }\n      }\n    }\n  }\n\n  // composant Energie\n  formatDataEnergy(params) {\n    for (let element of this.data) {\n      if (element.id.toString() === params.id) {\n        return {\n          calorieCount: element.keyData.calorieCount,\n          proteinCount: element.keyData.proteinCount,\n          carbohydrateCount: element.keyData.carbohydrateCount,\n          lipidCount: element.keyData.lipidCount,\n        }\n      }\n    }\n  }\n  // composant Diagramme Score\n  formatDataScore(params) {\n    for (let element of this.data) {\n      if (element.id.toString() === params.id) {\n        return {\n          name: 'score',\n          value: element.todayScore * 100,\n        }\n      }\n    }\n  }\n\n  // composant Diagramme courbe\n  formatDataSessions(params) {\n    const data = []\n    for (let element of this.data) {\n      if (element.userId.toString() === params.id) {\n        element.sessions.map((el) => {\n          // convertit les nombres en jours\n          switch (el.day) {\n            case 1:\n              el.day = 'L'\n              break\n\n            case 2:\n              el.day = 'M'\n              break\n            case 3:\n              el.day = 'M'\n              break\n            case 4:\n              el.day = 'J'\n              break\n            case 5:\n              el.day = 'V'\n              break\n            case 6:\n              el.day = 'S'\n              break\n            case 7:\n              el.day = 'D'\n              break\n            default:\n            // console.log(`erreur de jour ${el.day}.`)\n          }\n\n          data.push({\n            name: el.day,\n            // uv: 0,\n            pv: el.sessionLength,\n            // amt: 0,\n          })\n          return\n        })\n        return data\n      }\n    }\n  }\n\n  formatDataActivity(params) {\n    const data = []\n    const formatDate = (string) => {\n      console.log(string)\n      let sliced = string.slice(-1)\n      // console.log(popped)\n      return sliced\n    }\n    for (let element of this.data) {\n      if (element.userId.toString() === params.id) {\n        element.sessions.map((el) => {\n          data.push({\n            name: formatDate(el.day),\n            // name: el.day,\n            uv: el.kilogram,\n            pv: el.calories,\n          })\n          return\n        })\n        return data\n      }\n    }\n  }\n\n  // composant diagramme toile\n  formatDataRadarChart(params) {\n    const data = []\n\n    for (let element of this.data) {\n      // console.log(element)\n      if (element.userId.toString() === params.id) {\n        element.data.map((el) => {\n          switch (element.kind) {\n            case 1:\n              element.kind = 'L'\n              break\n\n            // case 2:\n            //   el.day = 'M'\n            //   break\n            // case 3:\n            //   el.day = 'M'\n            //   break\n            // case 4:\n            //   el.day = 'J'\n            //   break\n            // case 5:\n            //   el.day = 'V'\n            //   break\n            // case 6:\n            //   el.day = 'S'\n            //   break\n            // case 7:\n            //   el.day = 'D'\n            //   break\n            // default:\n            // // console.log(`erreur de jour ${el.day}.`)\n          }\n\n          data.push({\n            subject: el.kind,\n            A: el.value,\n          })\n          // return (el.kind = element.kind[el.kind])\n        })\n\n        // console.log(data)\n        return data\n      }\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}