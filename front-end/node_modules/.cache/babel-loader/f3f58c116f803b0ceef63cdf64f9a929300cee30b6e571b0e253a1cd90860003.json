{"ast":null,"code":"var _jsxFileName = \"/Users/ste/Documents/JOB/OPENCLASSROOMS/PROJET 12/OCR_P12_SPORTSEE/front-end/src/components/DiagrammeToile/index.jsx\",\n  _s = $RefreshSig$();\nimport './style.scss';\nimport { USER_PERFORMANCE } from '../../data/mocked-data';\nimport { Modelisation } from '../../data/Modelisation';\nimport useFetch from '../../hooks/useFetch';\nimport { Radar, RadarChart, PolarGrid, PolarAngleAxis, ResponsiveContainer } from 'recharts';\nimport PropTypes from 'prop-types';\n\n/**\n *\n * @typedef PropType\n * @property {string} userId\n */\n\n/**\n * @description DiagrammeToile is a component that takes in prop an userId and returns datas from this userId\n * @param {PropType} userId\n * @return {object} Returns an object of datas if load data through API / if load data from\n * mocked datas file\n *\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DiagrammeToile(_ref) {\n  _s();\n  let {\n    userId\n  } = _ref;\n  const {\n    data,\n    error\n  } = useFetch(`http://localhost:3000/user/${userId}/performance`, getUserDataMockWithId());\n  DiagrammeToile.propTypes = {\n    /**\n     * User's datas\n     */\n    userId: PropTypes.string.isRequired\n  };\n\n  /**\n   * @description getUserDataMockWithId is a function that find the own datas\n   * from the user affected by userId\n   * @return { object } Returns userData\n   *\n   */\n\n  function getUserDataMockWithId() {\n    const userData = USER_PERFORMANCE.find(user => +user.userId === +userId);\n    return userData;\n  }\n  /**\n  * @description getData is a function that build through the class Modelisation\n  * an object of datas\n   \n  * @returns {object} Returns datas from modelisation.formatDataRadarChart()\n  */\n\n  function getData() {\n    const modelisation = new Modelisation(data);\n    return modelisation.formatDataRadarChart();\n  }\n  if (data !== null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `diagrammes-item diagrammes_diagramme-toile`,\n      children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: \"100%\",\n        children: /*#__PURE__*/_jsxDEV(RadarChart, {\n          cx: \"50%\",\n          cy: \"50%\",\n          outerRadius: \"55%\",\n          data: getData(),\n          fill: \"white\",\n          children: [/*#__PURE__*/_jsxDEV(PolarGrid, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(PolarAngleAxis, {\n            dataKey: \"subject\",\n            tick: {\n              fontSize: 12\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Radar, {\n            name: \"Mike\",\n            dataKey: \"A\",\n            stroke: \"var(--red)\",\n            fill: \"var(--red)\",\n            fillOpacity: 0.7\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this);\n  }\n}\n_s(DiagrammeToile, \"nxGcM3ZnyDIOqE8/kWT+fd3s9HI=\", false, function () {\n  return [useFetch];\n});\n_c = DiagrammeToile;\nexport default DiagrammeToile;\nvar _c;\n$RefreshReg$(_c, \"DiagrammeToile\");","map":{"version":3,"names":["USER_PERFORMANCE","Modelisation","useFetch","Radar","RadarChart","PolarGrid","PolarAngleAxis","ResponsiveContainer","PropTypes","DiagrammeToile","userId","data","error","getUserDataMockWithId","propTypes","string","isRequired","userData","find","user","getData","modelisation","formatDataRadarChart","fontSize"],"sources":["/Users/ste/Documents/JOB/OPENCLASSROOMS/PROJET 12/OCR_P12_SPORTSEE/front-end/src/components/DiagrammeToile/index.jsx"],"sourcesContent":["import './style.scss'\n\nimport { USER_PERFORMANCE } from '../../data/mocked-data'\nimport { Modelisation } from '../../data/Modelisation'\nimport useFetch from '../../hooks/useFetch'\nimport {\n  Radar,\n  RadarChart,\n  PolarGrid,\n  PolarAngleAxis,\n  ResponsiveContainer,\n} from 'recharts'\nimport PropTypes from 'prop-types'\n\n/**\n *\n * @typedef PropType\n * @property {string} userId\n */\n\n/**\n * @description DiagrammeToile is a component that takes in prop an userId and returns datas from this userId\n * @param {PropType} userId\n * @return {object} Returns an object of datas if load data through API / if load data from\n * mocked datas file\n *\n */\n\nfunction DiagrammeToile({ userId }) {\n  const { data, error } = useFetch(\n    `http://localhost:3000/user/${userId}/performance`,\n    getUserDataMockWithId()\n  )\n  DiagrammeToile.propTypes = {\n    /**\n     * User's datas\n     */\n    userId: PropTypes.string.isRequired,\n  }\n\n  /**\n   * @description getUserDataMockWithId is a function that find the own datas\n   * from the user affected by userId\n   * @return { object } Returns userData\n   *\n   */\n\n  function getUserDataMockWithId() {\n    const userData = USER_PERFORMANCE.find((user) => +user.userId === +userId)\n    return userData\n  }\n  /**\n  * @description getData is a function that build through the class Modelisation\n  * an object of datas\n   \n  * @returns {object} Returns datas from modelisation.formatDataRadarChart()\n  */\n\n  function getData() {\n    const modelisation = new Modelisation(data)\n    return modelisation.formatDataRadarChart()\n  }\n\n  if (data !== null) {\n    return (\n      <div className={`diagrammes-item diagrammes_diagramme-toile`}>\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <RadarChart\n            cx=\"50%\"\n            cy=\"50%\"\n            outerRadius=\"55%\"\n            data={getData()}\n            fill=\"white\"\n          >\n            <PolarGrid />\n            <PolarAngleAxis dataKey=\"subject\" tick={{ fontSize: 12 }} />\n\n            <Radar\n              name=\"Mike\"\n              dataKey=\"A\"\n              stroke=\"var(--red)\"\n              fill=\"var(--red)\"\n              fillOpacity={0.7}\n            />\n          </RadarChart>\n        </ResponsiveContainer>\n      </div>\n    )\n  }\n}\n\nexport default DiagrammeToile\n"],"mappings":";;AAAA,OAAO,cAAc;AAErB,SAASA,gBAAgB,QAAQ,wBAAwB;AACzD,SAASC,YAAY,QAAQ,yBAAyB;AACtD,OAAOC,QAAQ,MAAM,sBAAsB;AAC3C,SACEC,KAAK,EACLC,UAAU,EACVC,SAAS,EACTC,cAAc,EACdC,mBAAmB,QACd,UAAU;AACjB,OAAOC,SAAS,MAAM,YAAY;;AAElC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA,SAASC,cAAc,OAAa;EAAA;EAAA,IAAZ;IAAEC;EAAO,CAAC;EAChC,MAAM;IAAEC,IAAI;IAAEC;EAAM,CAAC,GAAGV,QAAQ,CAC7B,8BAA6BQ,MAAO,cAAa,EAClDG,qBAAqB,EAAE,CACxB;EACDJ,cAAc,CAACK,SAAS,GAAG;IACzB;AACJ;AACA;IACIJ,MAAM,EAAEF,SAAS,CAACO,MAAM,CAACC;EAC3B,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;;EAEE,SAASH,qBAAqB,GAAG;IAC/B,MAAMI,QAAQ,GAAGjB,gBAAgB,CAACkB,IAAI,CAAEC,IAAI,IAAK,CAACA,IAAI,CAACT,MAAM,KAAK,CAACA,MAAM,CAAC;IAC1E,OAAOO,QAAQ;EACjB;EACA;AACF;AACA;AACA;AACA;AACA;;EAEE,SAASG,OAAO,GAAG;IACjB,MAAMC,YAAY,GAAG,IAAIpB,YAAY,CAACU,IAAI,CAAC;IAC3C,OAAOU,YAAY,CAACC,oBAAoB,EAAE;EAC5C;EAEA,IAAIX,IAAI,KAAK,IAAI,EAAE;IACjB,oBACE;MAAK,SAAS,EAAG,4CAA4C;MAAA,uBAC3D,QAAC,mBAAmB;QAAC,KAAK,EAAC,MAAM;QAAC,MAAM,EAAC,MAAM;QAAA,uBAC7C,QAAC,UAAU;UACT,EAAE,EAAC,KAAK;UACR,EAAE,EAAC,KAAK;UACR,WAAW,EAAC,KAAK;UACjB,IAAI,EAAES,OAAO,EAAG;UAChB,IAAI,EAAC,OAAO;UAAA,wBAEZ,QAAC,SAAS;YAAA;YAAA;YAAA;UAAA,QAAG,eACb,QAAC,cAAc;YAAC,OAAO,EAAC,SAAS;YAAC,IAAI,EAAE;cAAEG,QAAQ,EAAE;YAAG;UAAE;YAAA;YAAA;YAAA;UAAA,QAAG,eAE5D,QAAC,KAAK;YACJ,IAAI,EAAC,MAAM;YACX,OAAO,EAAC,GAAG;YACX,MAAM,EAAC,YAAY;YACnB,IAAI,EAAC,YAAY;YACjB,WAAW,EAAE;UAAI;YAAA;YAAA;YAAA;UAAA,QACjB;QAAA;UAAA;UAAA;UAAA;QAAA;MACS;QAAA;QAAA;QAAA;MAAA;IACO;MAAA;MAAA;MAAA;IAAA,QAClB;EAEV;AACF;AAAC,GA7DQd,cAAc;EAAA,QACGP,QAAQ;AAAA;AAAA,KADzBO,cAAc;AA+DvB,eAAeA,cAAc;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}