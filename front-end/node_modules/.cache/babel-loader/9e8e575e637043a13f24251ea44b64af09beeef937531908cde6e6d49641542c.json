{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nfunction useFetch(url, mock) {\n  _s();\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const DATA_FROM_API = true;\n}\n_s(useFetch, \"iQX+4OAhA5+VU/aNcdxshMNE96c=\");\nuseEffect(() => {\n  if (DATA_FROM_API) {\n    fetchData();\n  } else {\n    setData(mock);\n  }\n}, []);\nasync function fetchData() {\n  try {\n    const response = await axios.get(url);\n    setData(response.data.data);\n  } catch (error) {\n    setError(error);\n  }\n}","map":{"version":3,"names":["useState","useEffect","axios","useFetch","url","mock","data","setData","error","setError","DATA_FROM_API","fetchData","response","get"],"sources":["/Users/ste/Documents/JOB/OPENCLASSROOMS/PROJET 12/OCR_P12_SPORTSEE/front-end/src/hooks/useFetch.js"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nfunction useFetch(url, mock) {\n  const [data, setData] = useState(null)\n  const [error, setError] = useState(null)\n  const DATA_FROM_API = true\n}\n\nuseEffect(() => {\n  if (DATA_FROM_API) {\n    fetchData()\n  } else {\n    setData(mock)\n  }\n}, [])\n\nasync function fetchData() {\n  try {\n    const response = await axios.get(url)\n    setData(response.data.data)\n  } catch (error) {\n    setError(error)\n  }\n}\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AAEzB,SAASC,QAAQ,CAACC,GAAG,EAAEC,IAAI,EAAE;EAAA;EAC3B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAMU,aAAa,GAAG,IAAI;AAC5B;AAAC,GAJQP,QAAQ;AAMjBF,SAAS,CAAC,MAAM;EACd,IAAIS,aAAa,EAAE;IACjBC,SAAS,EAAE;EACb,CAAC,MAAM;IACLJ,OAAO,CAACF,IAAI,CAAC;EACf;AACF,CAAC,EAAE,EAAE,CAAC;AAEN,eAAeM,SAAS,GAAG;EACzB,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAACT,GAAG,CAAC;IACrCG,OAAO,CAACK,QAAQ,CAACN,IAAI,CAACA,IAAI,CAAC;EAC7B,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,QAAQ,CAACD,KAAK,CAAC;EACjB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}