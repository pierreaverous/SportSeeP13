{"ast":null,"code":"// import { USER_MAIN_DATA } from '../data/mocked-data'\n// import { USER_ACTIVITY } from '../data/mocked-data'\n// import { USER_AVERAGE_SESSIONS } from '../data/mocked-data'\n// import { USER_PERFORMANCE } from '../data/mocked-data'\n\nexport class Modelisation {\n  constructor(data) {\n    this.data = data;\n  }\n\n  //component Bonjour\n  formatUserName() {\n    console.log(this.data);\n    console.log(this.data.userInfos);\n    console.log(this.data.userInfos.firstName);\n    const dataFormated = this.data.userInfos.firstName;\n    // const dataFormated = this.data?.userInfos.map((item) => {\n    //   console.log(item)\n    //   return {\n    //     name: item.firstName,\n    //   }\n    // })\n\n    return dataFormated;\n  }\n\n  // composant Energie\n  formatDataEnergy(params) {\n    for (let element of this.data) {\n      if (element.id.toString() === params.id) {\n        return {\n          calorieCount: element.keyData.calorieCount,\n          proteinCount: element.keyData.proteinCount,\n          carbohydrateCount: element.keyData.carbohydrateCount,\n          lipidCount: element.keyData.lipidCount\n        };\n      }\n    }\n  }\n  // composant Diagramme Score\n  formatDataScore(params) {\n    for (let element of this.data) {\n      if (element.id.toString() === params.id) {\n        return {\n          name: 'score',\n          value: element.todayScore * 100\n        };\n      }\n    }\n  }\n\n  // composant Diagramme courbe\n  formatDataSessions(params) {\n    const data = [];\n    for (let element of this.data) {\n      if (element.userId.toString() === params.id) {\n        element.sessions.map(el => {\n          // convertit les nombres en jours\n          switch (el.day) {\n            case 1:\n              el.day = 'L';\n              break;\n            case 2:\n              el.day = 'M';\n              break;\n            case 3:\n              el.day = 'M';\n              break;\n            case 4:\n              el.day = 'J';\n              break;\n            case 5:\n              el.day = 'V';\n              break;\n            case 6:\n              el.day = 'S';\n              break;\n            case 7:\n              el.day = 'D';\n              break;\n            default:\n            // console.log(`erreur de jour ${el.day}.`)\n          }\n\n          data.push({\n            name: el.day,\n            // uv: 0,\n            pv: el.sessionLength\n            // amt: 0,\n          });\n\n          return data;\n        });\n        return data;\n      }\n    }\n  }\n  formatDataActivity() {\n    var _this$data;\n    const dataFormated = (_this$data = this.data) === null || _this$data === void 0 ? void 0 : _this$data.sessions.map((item, index) => {\n      return {\n        name: index + 1,\n        uv: item.calories,\n        pv: item.kilogram\n      };\n    });\n    return dataFormated;\n  }\n\n  // formatDataActivity() {\n  //   console.log('dans classe de modelisation')\n  //   const data = []\n  //   let sliced\n\n  //   const formatDate = (string) => {\n  //     string.slice(-2) === '0'\n  //       ? (sliced = string.slice(-2))\n  //       : (sliced = string.slice(-1))\n  //     return sliced\n  //   }\n\n  //   for (let element of this.data) {\n  //     if (element.userId.toString() === params.id) {\n  //       element.sessions.map((el) => {\n  //         data.push({\n  //           name: formatDate(el.day),\n  //           uv: el.kilogram,\n  //           pv: el.calories,\n  //           // pvgraph: el.calories / 2.5,\n  //         })\n  //         return data\n  //       })\n  //       return data\n  //     }\n  //   }\n  // }\n\n  // composant diagramme toile\n  formatDataRadarChart(params) {\n    const data = [];\n    for (let element of this.data) {\n      if (element.userId.toString() === params.id) {\n        element.data.map(el => {\n          data.push({\n            subject: element.kind[el.kind],\n            A: el.value\n          });\n          return data;\n        });\n        return data;\n      }\n    }\n  }\n}","map":{"version":3,"names":["Modelisation","constructor","data","formatUserName","console","log","userInfos","firstName","dataFormated","formatDataEnergy","params","element","id","toString","calorieCount","keyData","proteinCount","carbohydrateCount","lipidCount","formatDataScore","name","value","todayScore","formatDataSessions","userId","sessions","map","el","day","push","pv","sessionLength","formatDataActivity","item","index","uv","calories","kilogram","formatDataRadarChart","subject","kind","A"],"sources":["/Users/ste/Documents/JOB/OPENCLASSROOMS/PROJET 12/OCR_P12_SPORTSEE/front-end/src/data/Modelisation.js"],"sourcesContent":["// import { USER_MAIN_DATA } from '../data/mocked-data'\n// import { USER_ACTIVITY } from '../data/mocked-data'\n// import { USER_AVERAGE_SESSIONS } from '../data/mocked-data'\n// import { USER_PERFORMANCE } from '../data/mocked-data'\n\nexport class Modelisation {\n  constructor(data) {\n    this.data = data\n  }\n\n  //component Bonjour\n  formatUserName() {\n    console.log(this.data)\n    console.log(this.data.userInfos)\n    console.log(this.data.userInfos.firstName)\n\n    const dataFormated = this.data.userInfos.firstName\n    // const dataFormated = this.data?.userInfos.map((item) => {\n    //   console.log(item)\n    //   return {\n    //     name: item.firstName,\n    //   }\n    // })\n\n    return dataFormated\n  }\n\n  // composant Energie\n  formatDataEnergy(params) {\n    for (let element of this.data) {\n      if (element.id.toString() === params.id) {\n        return {\n          calorieCount: element.keyData.calorieCount,\n          proteinCount: element.keyData.proteinCount,\n          carbohydrateCount: element.keyData.carbohydrateCount,\n          lipidCount: element.keyData.lipidCount,\n        }\n      }\n    }\n  }\n  // composant Diagramme Score\n  formatDataScore(params) {\n    for (let element of this.data) {\n      if (element.id.toString() === params.id) {\n        return {\n          name: 'score',\n          value: element.todayScore * 100,\n        }\n      }\n    }\n  }\n\n  // composant Diagramme courbe\n  formatDataSessions(params) {\n    const data = []\n\n    for (let element of this.data) {\n      if (element.userId.toString() === params.id) {\n        element.sessions.map((el) => {\n          // convertit les nombres en jours\n          switch (el.day) {\n            case 1:\n              el.day = 'L'\n              break\n\n            case 2:\n              el.day = 'M'\n              break\n            case 3:\n              el.day = 'M'\n              break\n            case 4:\n              el.day = 'J'\n              break\n            case 5:\n              el.day = 'V'\n              break\n            case 6:\n              el.day = 'S'\n              break\n            case 7:\n              el.day = 'D'\n              break\n            default:\n            // console.log(`erreur de jour ${el.day}.`)\n          }\n\n          data.push({\n            name: el.day,\n            // uv: 0,\n            pv: el.sessionLength,\n            // amt: 0,\n          })\n          return data\n        })\n        return data\n      }\n    }\n  }\n  formatDataActivity() {\n    const dataFormated = this.data?.sessions.map((item, index) => {\n      return {\n        name: index + 1,\n        uv: item.calories,\n        pv: item.kilogram,\n      }\n    })\n\n    return dataFormated\n  }\n\n  // formatDataActivity() {\n  //   console.log('dans classe de modelisation')\n  //   const data = []\n  //   let sliced\n\n  //   const formatDate = (string) => {\n  //     string.slice(-2) === '0'\n  //       ? (sliced = string.slice(-2))\n  //       : (sliced = string.slice(-1))\n  //     return sliced\n  //   }\n\n  //   for (let element of this.data) {\n  //     if (element.userId.toString() === params.id) {\n  //       element.sessions.map((el) => {\n  //         data.push({\n  //           name: formatDate(el.day),\n  //           uv: el.kilogram,\n  //           pv: el.calories,\n  //           // pvgraph: el.calories / 2.5,\n  //         })\n  //         return data\n  //       })\n  //       return data\n  //     }\n  //   }\n  // }\n\n  // composant diagramme toile\n  formatDataRadarChart(params) {\n    const data = []\n\n    for (let element of this.data) {\n      if (element.userId.toString() === params.id) {\n        element.data.map((el) => {\n          data.push({\n            subject: element.kind[el.kind],\n            A: el.value,\n          })\n          return data\n        })\n        return data\n      }\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}