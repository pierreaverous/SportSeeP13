{"ast":null,"code":"// import { USER_MAIN_DATA } from '../data/mocked-data'\n// import { USER_ACTIVITY } from '../data/mocked-data'\n// import { USER_AVERAGE_SESSIONS } from '../data/mocked-data'\n// import { USER_PERFORMANCE } from '../data/mocked-data'\n\nexport class Modelisation {\n  constructor(data) {\n    this.data = data;\n  }\n\n  //component Bonjour\n  formatUserName(params) {\n    for (let element of this.data) {\n      if (element.id.toString() === params.id) {\n        return {\n          name: element.userInfos.firstName\n        };\n      }\n    }\n  }\n\n  // composant Energie\n  formatDataEnergy(params) {\n    for (let element of this.data) {\n      if (element.id.toString() === params.id) {\n        return {\n          calorieCount: element.keyData.calorieCount,\n          proteinCount: element.keyData.proteinCount,\n          carbohydrateCount: element.keyData.carbohydrateCount,\n          lipidCount: element.keyData.lipidCount\n        };\n      }\n    }\n  }\n  // composant Diagramme Score\n  formatDataScore(params) {\n    for (let element of this.data) {\n      if (element.id.toString() === params.id) {\n        return {\n          name: 'score',\n          value: element.todayScore * 100\n        };\n      }\n    }\n  }\n\n  // composant Diagramme courbe\n  formatDataSessions(params) {\n    const data = [];\n    for (let element of this.data) {\n      if (element.userId.toString() === params.id) {\n        element.sessions.map(el => {\n          // convertit les nombres en jours\n          switch (el.day) {\n            case 1:\n              el.day = 'L';\n              break;\n            case 2:\n              el.day = 'M';\n              break;\n            case 3:\n              el.day = 'M';\n              break;\n            case 4:\n              el.day = 'J';\n              break;\n            case 5:\n              el.day = 'V';\n              break;\n            case 6:\n              el.day = 'S';\n              break;\n            case 7:\n              el.day = 'D';\n              break;\n            default:\n            // console.log(`erreur de jour ${el.day}.`)\n          }\n\n          data.push({\n            name: el.day,\n            // uv: 0,\n            pv: el.sessionLength\n            // amt: 0,\n          });\n\n          return data;\n        });\n        return data;\n      }\n    }\n  }\n  getActivity() {\n    var _this$data;\n    const dataFormated = (_this$data = this.data) === null || _this$data === void 0 ? void 0 : _this$data.sessions.map((item, index) => {\n      return {\n        name: index + 1,\n        uv: item.calories,\n        pv: item.kilogram\n      };\n    });\n    return dataFormated;\n  }\n  formatDataActivity() {\n    console.log('dans classe de modelisation');\n    const data = [];\n    let sliced;\n    const formatDate = string => {\n      string.slice(-2) === '0' ? sliced = string.slice(-2) : sliced = string.slice(-1);\n      return sliced;\n    };\n    for (let element of this.data) {\n      if (element.userId.toString() === params.id) {\n        element.sessions.map(el => {\n          data.push({\n            name: formatDate(el.day),\n            uv: el.kilogram,\n            pv: el.calories\n            // pvgraph: el.calories / 2.5,\n          });\n\n          return data;\n        });\n        return data;\n      }\n    }\n  }\n\n  // composant diagramme toile\n  formatDataRadarChart(params) {\n    const data = [];\n    for (let element of this.data) {\n      if (element.userId.toString() === params.id) {\n        element.data.map(el => {\n          data.push({\n            subject: element.kind[el.kind],\n            A: el.value\n          });\n          return data;\n        });\n        return data;\n      }\n    }\n  }\n}","map":{"version":3,"names":["Modelisation","constructor","data","formatUserName","params","element","id","toString","name","userInfos","firstName","formatDataEnergy","calorieCount","keyData","proteinCount","carbohydrateCount","lipidCount","formatDataScore","value","todayScore","formatDataSessions","userId","sessions","map","el","day","push","pv","sessionLength","getActivity","dataFormated","item","index","uv","calories","kilogram","formatDataActivity","console","log","sliced","formatDate","string","slice","formatDataRadarChart","subject","kind","A"],"sources":["/Users/ste/Documents/JOB/OPENCLASSROOMS/PROJET 12/OCR_P12_SPORTSEE/front-end/src/data/Modelisation.js"],"sourcesContent":["// import { USER_MAIN_DATA } from '../data/mocked-data'\n// import { USER_ACTIVITY } from '../data/mocked-data'\n// import { USER_AVERAGE_SESSIONS } from '../data/mocked-data'\n// import { USER_PERFORMANCE } from '../data/mocked-data'\n\nexport class Modelisation {\n  constructor(data) {\n    this.data = data\n  }\n\n  //component Bonjour\n  formatUserName(params) {\n    for (let element of this.data) {\n      if (element.id.toString() === params.id) {\n        return {\n          name: element.userInfos.firstName,\n        }\n      }\n    }\n  }\n\n  // composant Energie\n  formatDataEnergy(params) {\n    for (let element of this.data) {\n      if (element.id.toString() === params.id) {\n        return {\n          calorieCount: element.keyData.calorieCount,\n          proteinCount: element.keyData.proteinCount,\n          carbohydrateCount: element.keyData.carbohydrateCount,\n          lipidCount: element.keyData.lipidCount,\n        }\n      }\n    }\n  }\n  // composant Diagramme Score\n  formatDataScore(params) {\n    for (let element of this.data) {\n      if (element.id.toString() === params.id) {\n        return {\n          name: 'score',\n          value: element.todayScore * 100,\n        }\n      }\n    }\n  }\n\n  // composant Diagramme courbe\n  formatDataSessions(params) {\n    const data = []\n\n    for (let element of this.data) {\n      if (element.userId.toString() === params.id) {\n        element.sessions.map((el) => {\n          // convertit les nombres en jours\n          switch (el.day) {\n            case 1:\n              el.day = 'L'\n              break\n\n            case 2:\n              el.day = 'M'\n              break\n            case 3:\n              el.day = 'M'\n              break\n            case 4:\n              el.day = 'J'\n              break\n            case 5:\n              el.day = 'V'\n              break\n            case 6:\n              el.day = 'S'\n              break\n            case 7:\n              el.day = 'D'\n              break\n            default:\n            // console.log(`erreur de jour ${el.day}.`)\n          }\n\n          data.push({\n            name: el.day,\n            // uv: 0,\n            pv: el.sessionLength,\n            // amt: 0,\n          })\n          return data\n        })\n        return data\n      }\n    }\n  }\n  getActivity() {\n    const dataFormated = this.data?.sessions.map((item, index) => {\n      return {\n        name: index + 1,\n        uv: item.calories,\n        pv: item.kilogram,\n      }\n    })\n\n    return dataFormated\n  }\n\n  formatDataActivity() {\n    console.log('dans classe de modelisation')\n    const data = []\n    let sliced\n\n    const formatDate = (string) => {\n      string.slice(-2) === '0'\n        ? (sliced = string.slice(-2))\n        : (sliced = string.slice(-1))\n      return sliced\n    }\n\n    for (let element of this.data) {\n      if (element.userId.toString() === params.id) {\n        element.sessions.map((el) => {\n          data.push({\n            name: formatDate(el.day),\n            uv: el.kilogram,\n            pv: el.calories,\n            // pvgraph: el.calories / 2.5,\n          })\n          return data\n        })\n        return data\n      }\n    }\n  }\n\n  // composant diagramme toile\n  formatDataRadarChart(params) {\n    const data = []\n\n    for (let element of this.data) {\n      if (element.userId.toString() === params.id) {\n        element.data.map((el) => {\n          data.push({\n            subject: element.kind[el.kind],\n            A: el.value,\n          })\n          return data\n        })\n        return data\n      }\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}