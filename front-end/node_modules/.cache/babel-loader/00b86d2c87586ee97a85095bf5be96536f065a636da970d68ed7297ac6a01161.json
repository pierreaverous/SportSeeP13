{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pierr\\\\Documents\\\\openclassroom\\\\Projet13\\\\SportSeeP13\\\\front-end\\\\src\\\\components\\\\Energie\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport './style.scss';\nimport React, { Fragment } from 'react';\nimport { USER_MAIN_DATA } from '../../data/mocked-data';\nimport { Modelisation } from '../../data/Modelisation';\nimport useFetch from '../../hooks/useFetch';\nimport PropTypes from 'prop-types';\n\n//IMPORT IMAGES\nimport caloriesImg from '../../assets/calories-icon.png';\nimport proteinesImg from '../../assets/protein-icon.png';\nimport glucidesImg from '../../assets/carbs-icon.png';\nimport lipidesImg from '../../assets/fat-icon.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst calories = 'Calories';\nconst proteines = 'Protéines';\nconst glucides = 'Glucides';\nconst lipides = 'Lipides';\n\n/**\r\n *\r\n * @typedef PropType\r\n * @property {string} userId\r\n */\n\n/**\r\n * @description Energie is a component that takes in prop an userId and returns datas from this userId\r\n * @param {PropType} userId\r\n * @return {object} Returns an object of datas if load data through API / if load data from\r\n * mocked datas file\r\n *\r\n */\n\nfunction Energie(_ref) {\n  _s();\n  let {\n    userId\n  } = _ref;\n  const {\n    data,\n    error\n  } = useFetch(`http://localhost:3000/user/${userId}`, getUserDataMockWithId());\n  Energie.propTypes = {\n    /**\r\n     * User's datas\r\n     */\n    userId: PropTypes.string.isRequired\n  };\n\n  /**\r\n   * @description getUserDataMockWithId is a function that find the own datas\r\n   * from the user affected by userId\r\n   * @return { object } Returns userData\r\n   *\r\n   */\n\n  function getUserDataMockWithId() {\n    const userData = USER_MAIN_DATA.find(user => +user.id === +userId);\n    return userData;\n  }\n\n  /**\r\n  * @description getData is a function that build through the class Modelisation\r\n  * an object of datas\r\n   \r\n  * @returns {object} Returns datas from modelisation.formatDataEnergy()\r\n  */\n\n  function getData() {\n    const modelisation = new Modelisation(data);\n    return modelisation.formatDataEnergy();\n  }\n  if (data !== null) {\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"energie-item energie_calories\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: caloriesImg,\n          alt: calories\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: `${getData().calorieCount.toLocaleString('en-IN')}\n            kCal`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: calories\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"energie-item energie_proteines\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: proteinesImg,\n          alt: proteines\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: `${getData().proteinCount}g`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: proteines\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"energie-item energie_glucides\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: glucidesImg,\n          alt: glucides\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: `${getData().carbohydrateCount}g`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: glucides\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"energie-item energie_lipides\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: lipidesImg,\n          alt: lipides\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: `${getData().lipidCount}g`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: lipides\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this);\n  }\n}\n_s(Energie, \"nxGcM3ZnyDIOqE8/kWT+fd3s9HI=\", false, function () {\n  return [useFetch];\n});\n_c = Energie;\nexport default Energie;\nvar _c;\n$RefreshReg$(_c, \"Energie\");","map":{"version":3,"names":["React","Fragment","USER_MAIN_DATA","Modelisation","useFetch","PropTypes","caloriesImg","proteinesImg","glucidesImg","lipidesImg","calories","proteines","glucides","lipides","Energie","userId","data","error","getUserDataMockWithId","propTypes","string","isRequired","userData","find","user","id","getData","modelisation","formatDataEnergy","calorieCount","toLocaleString","proteinCount","carbohydrateCount","lipidCount"],"sources":["C:/Users/pierr/Documents/openclassroom/Projet13/SportSeeP13/front-end/src/components/Energie/index.jsx"],"sourcesContent":["import './style.scss'\r\nimport React, { Fragment } from 'react'\r\nimport { USER_MAIN_DATA } from '../../data/mocked-data'\r\nimport { Modelisation } from '../../data/Modelisation'\r\nimport useFetch from '../../hooks/useFetch'\r\nimport PropTypes from 'prop-types'\r\n\r\n//IMPORT IMAGES\r\nimport caloriesImg from '../../assets/calories-icon.png'\r\nimport proteinesImg from '../../assets/protein-icon.png'\r\nimport glucidesImg from '../../assets/carbs-icon.png'\r\nimport lipidesImg from '../../assets/fat-icon.png'\r\n\r\nconst calories = 'Calories'\r\nconst proteines = 'Protéines'\r\nconst glucides = 'Glucides'\r\nconst lipides = 'Lipides'\r\n\r\n/**\r\n *\r\n * @typedef PropType\r\n * @property {string} userId\r\n */\r\n\r\n/**\r\n * @description Energie is a component that takes in prop an userId and returns datas from this userId\r\n * @param {PropType} userId\r\n * @return {object} Returns an object of datas if load data through API / if load data from\r\n * mocked datas file\r\n *\r\n */\r\n\r\nfunction Energie({ userId }) {\r\n  const { data, error } = useFetch(\r\n    `http://localhost:3000/user/${userId}`,\r\n    getUserDataMockWithId()\r\n  )\r\n\r\n  Energie.propTypes = {\r\n    /**\r\n     * User's datas\r\n     */\r\n    userId: PropTypes.string.isRequired,\r\n  }\r\n\r\n  /**\r\n   * @description getUserDataMockWithId is a function that find the own datas\r\n   * from the user affected by userId\r\n   * @return { object } Returns userData\r\n   *\r\n   */\r\n\r\n  function getUserDataMockWithId() {\r\n    const userData = USER_MAIN_DATA.find((user) => +user.id === +userId)\r\n    return userData\r\n  }\r\n\r\n  /**\r\n  * @description getData is a function that build through the class Modelisation\r\n  * an object of datas\r\n   \r\n  * @returns {object} Returns datas from modelisation.formatDataEnergy()\r\n  */\r\n\r\n  function getData() {\r\n    const modelisation = new Modelisation(data)\r\n    return modelisation.formatDataEnergy()\r\n  }\r\n\r\n  if (data !== null) {\r\n    return (\r\n      <Fragment>\r\n        <div className=\"energie-item energie_calories\">\r\n          <img src={caloriesImg} alt={calories} />\r\n          <div>\r\n            {/* toLocaleString pour séparation des milliers */}\r\n            <h3>\r\n              {`${getData().calorieCount.toLocaleString('en-IN')}\r\n            kCal`}\r\n            </h3>\r\n            <p>{calories}</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"energie-item energie_proteines\">\r\n          <img src={proteinesImg} alt={proteines} />\r\n          <div>\r\n            <h3>{`${getData().proteinCount}g`}</h3>\r\n            <p>{proteines}</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"energie-item energie_glucides\">\r\n          <img src={glucidesImg} alt={glucides} />\r\n          <div>\r\n            <h3>{`${getData().carbohydrateCount}g`}</h3>\r\n            <p>{glucides}</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"energie-item energie_lipides\">\r\n          <img src={lipidesImg} alt={lipides} />\r\n          <div>\r\n            <h3>{`${getData().lipidCount}g`}</h3>\r\n            <p>{lipides}</p>\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Energie\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}